# 六大原则：《Android进阶之光》

* 单一职责原则
* 开放封闭原则
* 里氏替换原则
* 依赖倒置原则
* 迪米特原则
* 接口隔离原则

## 单一职责原则：
是什么：一个类应该仅有一个引起它变化的原因，即不要让一个类承担过多的职责。一个类或一个接口只负责唯一的一类功能。
为什么：一个类承担的职责过多，这些职责就会耦合在一起，一个职责的变化可能会削弱或者抑制其他职责。这种设计很脆弱，变化发生，设计会遭到破坏。
怎么样：根据个人经验界定。
用途/后果：Activity中写Bean文件、网络数据处理，adapter适配器等，变化原因太多，版本维护不方便，违背了定义。
运用：门面模式。

## 开放封闭原则：
是什么：类、模块、函数等开放拓展，封闭修改。
为什么：保证稳定。
怎么样：通过扩展方式实现变化，不是通过修改原有代码实现。
用途/后果：使用抽象类/接口，添加新功能通过添加一个新的子类实现。

## 里氏替换原则：
是什么：所有引用父类/基类的地方必须能透明地使用其子类的对象。用子类对象替换父类对象。
说明：一个父类对象替换成其子类对象，程序不会产生任何错误和异常；但是子类对象不一定能够使用基类对象。
为什么：
1：实现开放封闭原则的重要方式之一。
为什么：使用父类对象的地方都可以使用子类对象，因此在程序中尽量使用父类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。
怎么样：
* 子类的所有方法必须在父类中声明，或子类必须实现父类中声明的所有方法。
* 根据里氏替换原则，为了保证系统的扩展性，在程序中通常使用父类来进行定义。
* 如果一个方法只存在子类中，在父类中不提供相应的声明，则无法在以父类定义的对象中使用该方法。
* 运用时，尽量把父类设计为抽象类或接口，让子类继承父类或实现父接口，并实现在父类中声明的方法。
* 运行时，子类实例替换父类实例(多态)，可以很方便扩展系统功能，同时无须修改原有子类的代码。
* 增加新的功能可以通过增加一个新的子类来实现。
2：开放封闭原则的具体实现手段之一。
编译阶段，Java编译器会检查一个程序是否符合里氏替换原则。
这是一个与实现无关的、纯语法意义上的检查，但Java编译器的检查有局限性。

## 依赖倒置原则：
是什么：高层模块不应该依赖低层模块，两者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。
怎么样：
抽象指接口或抽象类，两者都不能直接被实例化；
细节就是实现类，实现接口或继承抽象类产生的就是细节，即可以加上一个关键字new产生的对象。
高层模块就是调用端，低层模块就是具体实现类；
表现：模块间的依赖通过抽象发生，实现类之间不发生直接依赖关系，依赖关系是通过接口或者抽象类产生。
如果类与类直接依赖细节，那么就会直接耦合；
如此一来当修改时，就会同时修改依赖者代码，这样限制了可扩展性。

## 迪米特原则/最少知识原则：
是什么：一个软件实体应当尽可能少地与其他实体发生相互作用。
* 当其中某一个模块发生修改时，就会尽量少地影响其他模块。
* 在设计系统时，应该尽量减少对象之间的交互。
* 如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用。
* 如果其中的一个对象需要调用另一个对象的某一个方法，则可以通过第三者转发这个调用，即通过引入一个合理的第三者来降低现有对象之间的耦合度。
怎么样：
* 在类的划分上，应当尽量创建松耦合的类。类之间的耦合度越低，就越有利于复用。一个处在松耦合中的类一旦被修改，则不会对关联的类造成太大波及。
* 在类的结构设计上，每一个类都应当尽量降低其成员变量和成员函数的访问权限。
* 在对其他类的引用上，一个对象对其他对象的引用应当降到最低。

## 接口隔离原则：
是什么：一个类对另一个类的依赖应该建立在最小的接口上。使用接口隔离原则对接口进行约束。
怎么样：
* 建立单一接口，尽量细化接口，接口中的方法尽量少。即为各个类建立专用的接口，而不要试图建立一个很庞大的接口供所有依赖它的类调用。
* 接口尽量小，但是要有限度。对接口进行细化可以提高程序设计的灵活性；但是如果过小，则会造成接口数量过多，使设计复杂化。所以，一定要适度。
* 为依赖接口的类定制服务，只暴露给调用的类它需要的方法，不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。
* 提高内聚，减少对外交互。接口方法尽量少用public修饰。接口是对外的承诺，承诺越少对系统的开发越有利，变更风险也会越少。

