观察者模式/发布-订阅模式：
是什么：定义对象间一种一对多的依赖关系，每当一个对象改变状态时，则所有依赖于它的对象都会得到通知并被自动更新。
大白话：发布-订阅模式。发布者发布信息，订阅者获取信息，订阅了就能收到信息，没订阅就收不到信息。
角色：
抽象主题/抽象被观察者Subject：把所有观察者对象(任意数量)保存在一个集合里。提供一个接口，可以增加和删除观察者对象。attach(observer)，detach(observer)，notify。
具体主题/具体被观察者ConcreteSubject：内部状态发生改变时，给所有注册过的观察者发送通知。有关状态存入具体观察者对象。
抽象观察者Observer：更新接口，有update方法，得到更新通知时更新自己。
具体观察者ConcreteObserver：实现更新接口，得到更新通知时更新自身状态。

为什么：核心-处理对象之间如何交互及如何处理职责，使对象之间降低耦合。

怎么样：
example1：微信用户是观察者，微信公众号是被观察者，有多个微信用户关注了“程序猿”这个公众号，当这个公众号更新时就会通知这些订阅的微信用户。
抽象被观察者：Subject。定义了attach,detach,notify方法。
具体被观察者：WxPublic。定义一个list集合，添加删除观察者对象，状态改变时通知观察者。
抽象观察者：Observer。定义update方法，得到更新通知时更新。
具体观察者：WxUser。实现接口的update方法，得到更新通知时更新自己。
链接：https://www.cnblogs.com/luohanguo/p/7825656.html

example2：心神学堂-一个界面刷新，其它两个界面也跟着刷新。
具体被观察者：ClientO。有一个list集合，存放所有观察者对象，并添加所有观察者。当状态改变时通知所有观察者。
抽象观察者：OnRefreshListener。定义onRefresh方法，收到更新通知时更新自己。
具体观察者：AFragment/BFragment。实现接口中onRefresh方法，收到更新通知时更新自身状态。

example3：心神视讯-监听群组成员变化。SDK内部群组成员发生变化时，观察者就会更新群组成员数据。
具体被观察者：有一个List集合，存放所有观察者对象，并添加所有观察者。当状态改变时通知所有观察者。
抽象观察者：接口定义更新数据方法。
具体观察者：匿名内部类实现接口。收到更新通知时更新自身状态。

用途/后果：
使用场景：
* 关联行为场景:关联行为可拆分，而不是“组合”关系。
* 事件多级触发场景。
* 跨系统的消息交换场景，如消息队列、事件总线的处理机制。
优点：
* 观察者和被观察者之间是抽象耦合，容易扩展。
* 方便建立一套触发机制。
缺点：
* 在应用观察者模式时需要考虑一下开发效率和运行效率问题。
* 程序中包括一个被观察者、多个观察者，开发、调试等内容会比较复杂，而且在Java中消息的通知一般是顺序执行的，那么一个观察者卡顿，会影响整体的执行效率，在这种情况下，一般会采用异步方式。

快问快答：
1.观察者模式是什么？解决了什么问题？项目中应用？
是什么：定义对象间一种一对多的依赖关系，每当一个对象改变状态时，则所有依赖于它的对象都会得到通知并被自动更新。
解决的问题：处理对象之间如何交互及如何处理职责，使对象之间降低耦合。
项目中应用：微信公众号和多个微信用户的被观察者和观察者关系；心神学堂一个界面刷新，其它两个界面也跟着刷新。
源码中应用：EventBus，RxJava。遇到时再补充。
2.手写一个观察者模式并解释。
注意：表述要清晰，要把关键点核心点表达出来。
从三个方面叙述：是什么-为什么-怎么样。

