工厂方法模式：

是什么：对简单工厂模式进一步解耦，工厂方法使一个类的实例化延迟到其子类。
角色：
抽象工厂类：定义了一个创建对象的接口，返回抽象类对象
具体工厂类：一个子类对应一个工厂类，由具体工厂类决定实例化哪个类，返回具体类实例
抽象产品类：一个抽象工厂对应一个抽象产品
具体产品类：一个具体工厂对应一个具体产品，这个具体工厂负责生产对应的产品。

为什么：
简单工厂模式：
* 在工厂类中根据用户的选择条件决定创建哪个类的实例。
* 对客户端来说，去除了与具体类的依赖；
* 但是：如果要增加新类，需要在工厂类中添加一个Case分支条件，违背了开放封闭原则。
工厂方法模式：
* 符合开放封闭原则，开放拓展，封闭修改。
* 如果需要增加具体类，则无须修改工厂类，直接创建即可。

怎么样：
代码：FactoryMethod
抽象工厂类：创建抽象产品类。(电脑)
具体工厂类：一个工厂创建一个具体产品类。(A工厂创建A电脑类，B工厂创建B电脑类)
比较简单工厂模式和工厂方法模式：images-factory_compare.jpg

用途/后果：
使用场景：
调用者清楚的知道应该使用哪个具体工厂服务，实例化该具体工厂，生产出具体的产品。
只需要一种产品，不需要知道是哪个工厂生产，最终选用哪个工厂的决定权在生产者一方，根据系统情况实例化一个具体的工厂返回给使用者。

快问快答：
1.工厂方法模式是什么？解决了什么问题？项目中应用？
是什么：四个角色。
解决的问题：简单工厂模式是用一个工厂类创建不同的实例，这样与具体类解耦，但是新增具体类，需要修改工厂类，违反了开放封闭原则。
而工厂方法模式解决了这个问题，在简单工厂模式上进一步解耦，使一个类的实例化延迟到其子类。
项目中应用：无。
2.你知道哪些设计模式，并简要叙述？
从是什么-为什么-怎么样-用途/后果来叙述。





