位运算：


是什么：Java最有效率的算法。仅限二进制运算。


为什么：位运算直接操控二进制，节约内存，使程序速度更快。


怎么样：六种。
&     按位与
|     按位或
^     按位异或
~     取反
<<    左移，相当与*2
>>    右移，正数高位补0，负数由计算机决定>>，<<


用途/后果：
1.按位与&：
定义：按二进制进行与运算。
例子：
* n&1==1，n为奇数。因为奇数二进制末尾为1，1的二进制为1，1&1=1
* n&1==0，n为偶数。因为偶数二进制末尾为0，1的二进制为1，0&1=0
对比：
* n%2==1，n为奇数。
* n%2==0，n为偶数。
效率：n&1比n%2高效。
运用：
* 判断奇偶数，奇数得1，偶数得0。
* 获取一个数二进制的最后一位。

3.按位异或^：
定义：按二进制进行异或运算。
特点：
* 交换律：a ^ b ^ c <=> a ^ c ^ b
* 结合律：0异或任何数为任何数： 0 ^ n => n
* 结合律：相同的数异或为0：n ^ n => 0
* a，b两个值相同，异或结果为0；a，b两个值不同，异或结果为1。
所以：
* 异或同一个数两次，原数不变。
* 剩余的数异或同一个数两次，原数不变。
例子：
* B^A^A => B（重复数字为A）
* (A^B)^(A^A^B) => A^B^B => A
* 2^3^2^4^4 => 2^2^4^4^3 => 0^0^3 => 3（找出唯一不重复的数字3）

5.左移<<：
n<<=1即n=n<<1
含义：将n的二进制顺序左移1位，最低位补二进制0，并将结果赋值为n。左移相当于*2。例如：2<<3=2的3次方=8

6.右移>>：
n>>=1即n=n>>1
含义：将n的二进制顺序右移1位，最高位补二进制0，并将结果赋值为n。右移相当于/2。例如：8>>1=4。

三个常用：
n&1相当于n%2
n>>1相当于n/2
n<<1相当于n*2


算法：
见其它算法-位运算算法。


