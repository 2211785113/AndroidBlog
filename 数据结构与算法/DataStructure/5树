树
树型数据结构(各种树增删改查）

核心思想：递归，分而治之

递归学习链接：https://www.cnblogs.com/kubidemanong/p/10538799.html
递归的核心：
三要素：函数是干什么的；等价条件；结束条件。
- 明确这个函数想要干什么
- 寻找递归结束条件
- 找出函数的等价关系式
递归的本质：堆栈

1.二叉树
递归遍历链接：https://www.jianshu.com/p/6f179f37ad79
非递归遍历链接：https://blog.csdn.net/u012469528/article/details/81475824

遍历：
遍历过程：经过结点的路线一 样，只是访问各结点的时机不同。
先序遍历：根-左-右  代码：BinTreePreOrder
中序遍历：左-根-右  代码：BinTreeInOrder
后序遍历：左-右-根  代码：BinTreePostOrder

非递归基本思路：(中序为例)
[1]遇到一个结点，就把它压栈，并去遍历它的左子树;（一直遍历左子树）
[2]当左子树遍历结束后，从栈顶弹出这个结点并访问它;（栈顶弹出）
[3]然后按其右指针再去中序遍历该结点的右子树。
* 中序：遇到一个结点压栈，不断遍历左子树不断压栈，栈不为空弹出栈顶结点并访问根结点，再遍历右子树。
* 先序：遇到一个结点打印该结点，不断遍历左子树不断入栈，栈不为空弹出栈顶结点，再遍历右子树。
* 后序：遇到一个结点压栈，不断遍历左子树不断压栈，栈不为空弹出栈顶结点再遍历右子树，最后访问根结点。

翻转：BinTreeReversal
平铺：BinTreeFlatten

层序遍历：BinTreeLevelOrder
* 思路：从上到下，从左到右
* 思想：队列-先进先出
链接二叉树的next节点：ANextSibil

Android开发中ViewGroup#findViewById：AViewFind

[根据二叉树创建字符串](https://leetcode-cn.com/problems/construct-string-from-binary-tree/)：A606

[二叉树中第二小的节点](https://leetcode-cn.com/problems/second-minimum-node-in-a-binary-tree/)：A671

深度优先搜索/先序遍历：
[二叉搜索树:两数之和IV](https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/description/)：A653
二叉搜索树BST：非空左子树的键值小于根结点，非空右子树的键值大于根结点。

[寻找重复的子树](https://leetcode-cn.com/problems/find-duplicate-subtrees/description/)：A652

2.字典树/单词查找树/Trie树
是什么：树形结构，哈希树的变种
为什么：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。
怎么样：用于统计，排序和保存大量的字符串（但不仅限于字符串）,用于字符串前缀匹配的题目。
练习：A720
